generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid())
  email               String     @unique
  password            String
  role                UserRole
  needPasswordChanged Boolean    @default(true)
  status              UserStatus @default(ACTIVE)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  admin               Admin?
  doctor              Doctor?
  Patient             Patient?

  @@map("users")
}

model Admin {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  profilePhoto String?
  contactNo    String
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [email], references: [email])
}

model Doctor {
  id                  String              @id @default(uuid())
  name                String
  email               String              @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int                 @default(0)
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation(fields: [email], references: [email])
  // doctorSpecialties   DoctorSpecialties[]
  doctorSpecialties   DoctorSpecialties[]

  @@map("doctors")
}

model Patient {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(references: [email], fields: [email])

  @@map("patients")
}

model Specialties {
  id                String              @id @default(uuid())
  title             String
  icon              String
  doctorSpecialties DoctorSpecialties[]

  @@map("sapecialties")
}

model DoctorSpecialties {
  specialtiesId String
  specialties   Specialties @relation(fields: [specialtiesId], references: [id])
  doctorId      String
  doctor        Doctor      @relation(fields: [doctorId], references: [id])

  @@id([specialtiesId, doctorId])
  @@map("doctor_specialties")
}

enum UserRole {
  SUPPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETE
}

enum Gender {
  MALE
  FEMALE
}
